{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to latpy","text":"<p>Outcomes benefits python toolbox with mapping capabilities</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://VRConservation.github.io/latpy</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#latpy.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>latpy/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\n    \"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/VRConservation/latpy/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>latpy could always use more documentation, whether as part of the official latpy docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/VRConservation/latpy/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up latpy for local development.</p> <ol> <li> <p>Fork the latpy repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/latpy.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv latpy\n$ cd latpy/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 latpy tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/VRConservation/latpy/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install latpy, run this command in your terminal:</p> <pre><code>pip install latpy\n</code></pre> <p>This is the preferred method to install latpy, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install latpy from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/VRConservation/latpy\n</code></pre>"},{"location":"latpy/","title":"latpy module","text":"<p>Main module.</p>"},{"location":"usage/","title":"Usage","text":"<p>To use latpy in a project:</p> <pre><code>import latpy\n</code></pre>"},{"location":"utils/","title":"utils module","text":"<p>This is the utils module that contains utility functions for the latpy package.</p>"},{"location":"utils/#latpy.utils.csv_to_df","title":"<code>csv_to_df(csv_file)</code>","text":"<p>Converts a CSV file to a pandas DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>csv_file</code> <code>str</code> <p>The path to the CSV file.</p> required <p>Returns:</p> Type Description <code>pandas.DataFrame</code> <p>The pandas DataFrame.</p> Source code in <code>latpy/utils.py</code> <pre><code>def csv_to_df(csv_file):\n    \"\"\"Converts a CSV file to a pandas DataFrame.\n\n    Args:\n        csv_file (str): The path to the CSV file.\n\n    Returns:\n        pandas.DataFrame: The pandas DataFrame.\n    \"\"\"\n    import pandas as pd\n\n    return pd.read_csv(csv_file)\n</code></pre>"},{"location":"examples/csv/","title":"Csv","text":"In\u00a0[1]: Copied! <pre>import latpy\nimport numpy as np\nimport pandas as pd\n</pre> import latpy import numpy as np import pandas as pd"},{"location":"examples/demo/","title":"Demo","text":"In\u00a0[1]: Copied! <pre>import latpy\nimport ipyleaflet\nfrom ipyleaflet import basemaps\n</pre> import latpy import ipyleaflet from ipyleaflet import basemaps In\u00a0[2]: Copied! <pre>basemaps.OpenTopoMap\n</pre> basemaps.OpenTopoMap Out[2]: xyzservices.TileProvider OpenTopoMap urlhttps://{s}.tile.opentopomap.org/{z}/{x}/{y}.pngmax_zoom17html_attributionMap data: \u00a9 OpenStreetMap contributors, SRTM | Map style: \u00a9 OpenTopoMap (CC-BY-SA)attributionMap data: (C) OpenStreetMap contributors, SRTM | Map style: (C) OpenTopoMap (CC-BY-SA) In\u00a0[3]: Copied! <pre>m = latpy.Map(center=(51.5, -0.1), zoom=10)\n</pre> m = latpy.Map(center=(51.5, -0.1), zoom=10) In\u00a0[4]: Copied! <pre>from ipyleaflet import Map, basemaps\n\ncenter = [38, -119]\nzoom = 6\n\n# Map(basemap=basemaps.OpenTopoMap, center=center, zoom=zoom)\n# Map(basemap=basemaps.CartoDB.DarkMatter, center=center, zoom=zoom)\nm = Map(basemap=basemaps.Esri.WorldImagery, center=center, zoom=zoom)\nm\n</pre> from ipyleaflet import Map, basemaps  center = [38, -119] zoom = 6  # Map(basemap=basemaps.OpenTopoMap, center=center, zoom=zoom) # Map(basemap=basemaps.CartoDB.DarkMatter, center=center, zoom=zoom) m = Map(basemap=basemaps.Esri.WorldImagery, center=center, zoom=zoom) m Out[4]: In\u00a0[5]: Copied! <pre>m.layers\n</pre> m.layers Out[5]: <pre>(TileLayer(attribution='Tiles &amp;copy; Esri &amp;mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community', base=True, min_zoom=1, name='Esri.WorldImagery', options=['attribution', 'bounds', 'detect_retina', 'max_native_zoom', 'max_zoom', 'min_native_zoom', 'min_zoom', 'no_wrap', 'tile_size', 'tms', 'zoom_offset'], url='https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}'),)</pre> In\u00a0[6]: Copied! <pre># Import the Map class from the latpy module\n# from latpy import Map\n\n# Create a map object\nm = Map(center=(51.5, -0.1), zoom=10)\n\n# Display the map (assuming you are using a library like ipyleaflet or similar)\nm\n</pre> # Import the Map class from the latpy module # from latpy import Map  # Create a map object m = Map(center=(51.5, -0.1), zoom=10)  # Display the map (assuming you are using a library like ipyleaflet or similar) m Out[6]:"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>print('Hello World!')\n</pre> print('Hello World!') <pre>Hello World!\n</pre>"},{"location":"examples/ipyleaflet/","title":"Ipyleaflet","text":"In\u00a0[1]: Copied! <pre>from ipyleaflet import Map, Marker\n\ncenter = (52.204793, 360.121558)\n\nm = Map(center=center, zoom=15)\n\nmarker = Marker(location=center, draggable=True)\nm.add(marker)\n\ndisplay(m)\n\n# Now that the marker is on the Map, you can drag it with your mouse,\n# it will automatically update the `marker.location` attribute in Python\n\n# You can also update the marker location from Python, that will update the\n# marker location on the Map:\nmarker.location = (50, 356)\n</pre> from ipyleaflet import Map, Marker  center = (52.204793, 360.121558)  m = Map(center=center, zoom=15)  marker = Marker(location=center, draggable=True) m.add(marker)  display(m)  # Now that the marker is on the Map, you can drag it with your mouse, # it will automatically update the `marker.location` attribute in Python  # You can also update the marker location from Python, that will update the # marker location on the Map: marker.location = (50, 356) In\u00a0[2]: Copied! <pre>import latpy\n</pre> import latpy In\u00a0[3]: Copied! <pre># m = latpy.Map()\n# m\n</pre> # m = latpy.Map() # m"}]}